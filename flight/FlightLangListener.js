const FlightListener = require('../flight-gen/FlightListener').FlightListener;
const FlightParserClass = require('../flight-gen/FlightParser');
const FlightParser = FlightParserClass.FlightParser;

FlightLangListener = function(compact=false) {
  FlightListener.call(this); // inherit default listener

  this.res = [];
  this.lineEnding = compact ? '' : '\r\n';
  this.terminator = ';' + this.lineEnding;
  this.currentIndent = 0;
  this.space = compact ? '' : ' ';
  this.global = {
    scope: []
  };

  return this;
};

// inherit default listener
FlightLangListener.prototype = Object.create(FlightListener.prototype);
FlightLangListener.prototype.constructor = FlightLangListener;

// Enter a parse tree produced by FlightParser#source.
FlightListener.prototype.enterSource = function(ctx) {
  this.res.push('\'use strict\';' + this.lineEnding);
  this.res.push('/* Generated by the Flight transpiler */' + this.lineEnding);
};

// Exit a parse tree produced by FlightParser#source.
FlightListener.prototype.exitSource = function(ctx) {
  this.res = this.res.join('');
};

// Enter a parse tree produced by FlightParser#block.
FlightListener.prototype.enterBlock = function(ctx) {
  this.res.push('{' + this.lineEnding);
  this.currentIndent++;
};

// Exit a parse tree produced by FlightParser#block.
FlightListener.prototype.exitBlock = function(ctx) {
  this.res.push('}' + this.lineEnding);
  this.currentIndent--;
};

// Enter a parse tree produced by FlightParser#returnStatement.
FlightListener.prototype.enterReturnStatement = function(ctx) {
  this.res.push('return ');
};

// Exit a parse tree produced by FlightParser#returnStatement.
FlightListener.prototype.exitReturnStatement = function(ctx) {
  this.res.push(this.terminator);
};

// Enter a parse tree produced by FlightParser#variableStatement.
FlightListener.prototype.enterVariableStatement = function(ctx) {
  ctx.frozen = [];

  if (ctx.varMutability()) {
    this.res.push('let ');
  } else {
    this.res.push('const ');
  }
};

// Exit a parse tree produced by FlightParser#variableStatement.
FlightListener.prototype.exitVariableStatement = function(ctx) {
  this.res.push(this.terminator);

  let self = this;

  ctx.frozen.forEach(function(prop) {
    let objName = ctx.variableDeclaration().Identifier();

    self.res.push('Object.defineProperty(' + objName + ', \'' + 
      prop + '\', { configurable: false, writable: false })' + self.terminator);
  });
};


// Enter a parse tree produced by FlightParser#variableDeclaration.
FlightListener.prototype.enterVariableDeclaration = function(ctx) {
  let parentFunc = this.utils.findTypeInParents(ctx, FlightParser.FunctionDeclarationContext);
  if (parentFunc) {
    parentFunc.scope.push(ctx.Identifier().getText());
  } else {
    this.global.scope.push(ctx.Identifier().getText());
  }

  this.res.push(ctx.Identifier() + this.space + ctx.Assign() + this.space);
};

// Enter a parse tree produced by FlightParser#ifStatement.
FlightListener.prototype.enterIfStatement = function(ctx) {
  this.res.push('if' + this.space);
};

// Enter a parse tree produced by FlightParser#freezeMarker.
FlightListener.prototype.enterFreezeMarker = function(ctx) {
  let vsCtx = this.utils.findTypeInParents(ctx, FlightParser.VariableStatementContext);
  let propCtx = this.utils.findTypeInParents(ctx, FlightParser.PropertyAssignmentContext);

  if (vsCtx) {
    vsCtx.frozen.push(propCtx.propertyName().Identifier().getText());
  }
};

// Enter a parse tree produced by FlightParser#ifConditionList.
FlightListener.prototype.enterIfConditionList = function(ctx) {
  this.res.push('(');
};

// Enter a parse tree produced by FlightParser#assign.
FlightListener.prototype.enterAssign = function(ctx) {
  this.res.push(this.space + '=' + this.space);
};

// Exit a parse tree produced by FlightParser#AssignmentExpression.
FlightListener.prototype.exitAssignmentExpression = function(ctx) {
  this.res.push(this.terminator);
};

// Exit a parse tree produced by FlightParser#AssignmentExpression.
FlightListener.prototype.exitAssignmentOperatorExpression = function(ctx) {
  this.res.push(this.terminator);
};

// Exit a parse tree produced by FlightParser#ifConditionList.
FlightListener.prototype.exitIfConditionList = function(ctx) {
  this.res.push(')' + this.space);
};

// Enter a parse tree produced by FlightParser#elseStatement.
FlightListener.prototype.enterElseStatement = function(ctx) {
  this.res.push(' else ');
};

// Enter a parse tree produced by FlightParser#functionDeclaration.
FlightListener.prototype.enterFunctionDeclaration = function(ctx) {
  ctx.scope = [];
  ctx.impure = !!ctx.Impure();

  this.res.push('function ' + ctx.Identifier());
};

FlightListener.prototype.enterFunctionExpression = function(ctx) {
  ctx.scope = [];
  ctx.impure = false;

  this.res.push('function ' + (ctx.Identifier() ? ctx.Identifier() : ''));
};

// Enter a parse tree produced by FlightParser#functionBody.
FlightListener.prototype.enterFunctionBody = function(ctx) {
  this.res.push(this.lineEnding + '{' + this.lineEnding);
};

// Exit a parse tree produced by FlightParser#functionBody.
FlightListener.prototype.exitFunctionBody = function(ctx) {
  this.res.push(this.lineEnding + '}' + this.lineEnding);
};

// Enter a parse tree produced by FlightParser#arrowFunctionParameters.
FlightListener.prototype.enterArrowFunctionParameters = function(ctx) {
  ctx.scope = [];
  ctx.impure = false;
};

// Enter a parse tree produced by FlightParser#equal.
FlightListener.prototype.enterEqual = function(ctx) {
  this.res.push(this.space + '==' + this.space);
};

// Exit a parse tree produced by FlightParser#ArgumentsExpression.
FlightListener.prototype.exitArgumentsExpression = function(ctx) {
  if (!(
    ctx.parentCtx instanceof FlightParser.AdditiveExpressionContext || 
    !(ctx.parentCtx instanceof FlightParser.ExpressionStatementContext)
  ))
    this.res.push(this.terminator);
};

// Enter a parse tree produced by FlightParser#less.
FlightListener.prototype.enterLess = function(ctx) {
  this.res.push(this.space + '<' + this.space);
};


// Enter a parse tree produced by FlightParser#greater.
FlightListener.prototype.enterGreater = function(ctx) {
  this.res.push(this.space + '>' + this.space);
};


// Enter a parse tree produced by FlightParser#lessOrEql.
FlightListener.prototype.enterLessOrEql = function(ctx) {
  this.res.push(this.space+ '<=' + this.space);
};

// Enter a parse tree produced by FlightParser#greaterOrEql.
FlightListener.prototype.enterGreaterOrEql = function(ctx) {
  this.res.push(this.space + '>=' + this.space);
};

// Enter a parse tree produced by FlightParser#add.
FlightListener.prototype.enterAdd = function(ctx) {
  this.res.push(this.space + '+' + this.space);
};

// Enter a parse tree produced by FlightParser#sub.
FlightListener.prototype.enterSub = function(ctx) {
  this.res.push(this.space + '-' + this.space);
};

// Enter a parse tree produced by FlightParser#parameterSeparator.
FlightListener.prototype.enterParameterSeparator = function(ctx) {
  this.res.push(',' + this.space);
};

FlightListener.prototype.utils = {};
FlightListener.prototype.utils.findTypeInParents = function(ctx, type) {
  let parent = ctx.parentCtx;

  while (!(parent instanceof type) && parent.parentCtx) {
    parent = parent.parentCtx;
  }

  return (parent instanceof type) ? parent : null;
};

// Enter a parse tree produced by FlightParser#objectLiteral.
FlightListener.prototype.enterObjectLiteral = function(ctx) {
  let vsCtx = this.utils.findTypeInParents(ctx, FlightParser.VariableStatementContext);
  
  if (!vsCtx.varMutability()) {
    this.res.push('Object.freeze(');
    ctx.mustFreeze = true;
  }

  this.res.push('{' + this.lineEnding);
};

// Exit a parse tree produced by FlightParser#objectLiteral.
FlightListener.prototype.exitObjectLiteral = function(ctx) {
  this.res.push(this.lineEnding + '}');

  if (ctx.mustFreeze) this.res.push(')');
};


// Enter a parse tree produced by FlightParser#objectLiteral.
FlightListener.prototype.enterArrayLiteral = function(ctx) {
  let vsCtx = this.utils.findTypeInParents(ctx, FlightParser.VariableStatementContext);
  
  if (!vsCtx.varMutability()) {
    this.res.push('Object.freeze(');
    ctx.mustFreeze = true;
  }
};

// Exit a parse tree produced by FlightParser#objectLiteral.
FlightListener.prototype.exitArrayLiteral = function(ctx) {
  if (ctx.mustFreeze) this.res.push(')');
};

// Enter a parse tree produced by FlightParser#propertySeparator.
FlightListener.prototype.enterPropertySeparator = function(ctx) {
  this.res.push(',' + this.lineEnding);
};

// Enter a parse tree produced by FlightParser#propertyAssignSymbol.
FlightListener.prototype.enterPropertyAssignSymbol = function(ctx) {
  this.res.push(': ');
};

// Enter a parse tree produced by FlightParser#memberDot.
FlightListener.prototype.enterMemberDot = function(ctx) {
  this.res.push('.');
};

// Enter a parse tree produced by FlightParser#propertyName.
FlightListener.prototype.enterPropertyName = function(ctx) {
  this.res.push(ctx.Identifier());
};

// Enter a parse tree produced by FlightParser#identifierName.
FlightListener.prototype.enterIdentifierName = function(ctx) {
  let parentFunc = this.utils.findTypeInParents(ctx, FlightParser.FunctionDeclarationContext);
  
  if (parentFunc) {
    if (!parentFunc.impure && this.global.scope.indexOf(ctx.Identifier().getText()) !== -1 && parentFunc.scope.indexOf(ctx.Identifier().getText()) == -1){
      throw new Error("Using global variable '"+ ctx.Identifier().getText() + "' in pure function at line " + ctx.start.line + ':' + ctx.start.column);
    }
  }

  if (ctx.Identifier() == 'print') {
    this.res.push('console.log');
  } else {
    this.res.push(ctx.Identifier());
  }
};

// Enter a parse tree produced by FlightParser#arguments.
FlightListener.prototype.enterArguments = function(ctx) {
  this.res.push('(');
};

// Exit a parse tree produced by FlightParser#arguments.
FlightListener.prototype.exitArguments = function(ctx) {
  this.res.push(')');
};


// Enter a parse tree produced by FlightParser#formalParameterList.
FlightListener.prototype.enterFormalParameterList = function(ctx) {
  this.res.push('(');
};

// Exit a parse tree produced by FlightParser#formalParameterList.
FlightListener.prototype.exitFormalParameterList = function(ctx) {
  this.res.push(')');
};

// Enter a parse tree produced by FlightParser#formalParameterArg.
FlightListener.prototype.enterFormalParameterArg = function(ctx) {
  let parentFunc = this.utils.findTypeInParents(ctx, FlightParser.ArrowFunctionParametersContext) || this.utils.findTypeInParents(ctx, FlightParser.FunctionExpressionContext) || this.utils.findTypeInParents(ctx, FlightParser.FunctionDeclarationContext);
  parentFunc.scope.push(ctx.Identifier().getText());

  this.res.push(ctx.Identifier());
};

// Enter a parse tree produced by FlightParser#literal.
FlightListener.prototype.enterLiteral = function(ctx) {
  this.res.push(ctx.getText());
};

// Enter a parse tree produced by FlightParser#openBlock.
FlightListener.prototype.enterOpenBlock = function(ctx) {
  this.res.push('{' + this.lineEnding);
};

// Enter a parse tree produced by FlightParser#closeBlock.
FlightListener.prototype.enterCloseBlock = function(ctx) {
  this.res.push(this.lineEnding + '}' + this.lineEnding);
};

FlightListener.prototype.enterMultiply = function(ctx) {
  this.res.push(this.space + '*' + this.space);
};

FlightListener.prototype.enterDivide = function(ctx) {
  this.res.push(this.space + '/' + this.space);
};

FlightListener.prototype.enterModulo = function(ctx) {
  this.res.push(this.space + '%' + this.space);
};

FlightListener.prototype.enterLogicalAnd = function(ctx) {
  this.res.push(this.space + '&&' + this.space);
};

FlightListener.prototype.enterLogicalOr = function(ctx) {
  this.res.push(this.space + '||' + this.space);
};

FlightListener.prototype.enterNotEqual = function(ctx) {
  this.res.push(this.space + '!=' + this.space);
};

FlightListener.prototype.enterEqualStrict = function(ctx) {
  this.res.push(this.space + '===' + this.space);
};

FlightListener.prototype.enterNotEqualStrict = function(ctx) {
  this.res.push(this.space + '!==' + this.space);
};

FlightListener.prototype.enterMultiplyAssign = function(ctx) {
  this.res.push(this.space + '*=' + this.space);
};

FlightListener.prototype.enterDivideAssign = function(ctx) {
  this.res.push(this.space + '/=' + this.space);
};

FlightListener.prototype.enterModuloAssign = function(ctx) {
  this.res.push(this.space + '%=' + this.space);
};

FlightListener.prototype.enterAddAssign = function(ctx) {
  this.res.push(this.space + '+=' + this.space);
};

FlightListener.prototype.enterSubAssign = function(ctx) {
  this.res.push(this.space + '-=' + this.space);
};

// Enter a parse tree produced by FlightParser#elementListSeparator.
FlightListener.prototype.enterElementListSeparator = function(ctx) {
  this.res.push(',' + this.space);
};




// Enter a parse tree produced by FlightParser#arrayLiteralOpen.
FlightListener.prototype.enterArrayLiteralOpen = function(ctx) {
  this.res.push('[');
};

// Enter a parse tree produced by FlightParser#arrayLiteralClose.
FlightListener.prototype.enterArrayLiteralClose = function(ctx) {
  this.res.push(']');
};

// Enter a parse tree produced by FlightParser#arrowFunctionArrow.
FlightListener.prototype.enterArrowFunctionArrow = function(ctx) {
  this.res.push(this.space + '=>' + this.space);
};

module.exports = FlightLangListener;
