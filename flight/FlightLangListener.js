const FlightListener = require('../flight-gen/FlightListener').FlightListener;
const FlightParserClass = require('../flight-gen/FlightParser');
const FlightParser = FlightParserClass.FlightParser;

FlightLangListener = function(compact=false) {
  FlightListener.call(this); // inherit default listener

  this.res = [];
  this.lineEnding = compact ? '' : '\r\n';
  this.terminator = ';' + this.lineEnding;
  this.currentIndent = 0;
  this.space = compact ? '' : ' ';

  return this;
};

// inherit default listener
FlightLangListener.prototype = Object.create(FlightListener.prototype);
FlightLangListener.prototype.constructor = FlightLangListener;

// Enter a parse tree produced by FlightParser#source.
FlightListener.prototype.enterSource = function(ctx) {
  this.res.push('/* Generated by the Flight transpiler */' + this.lineEnding);
};

// Exit a parse tree produced by FlightParser#source.
FlightListener.prototype.exitSource = function(ctx) {
  this.res = this.res.join('');
};

// Enter a parse tree produced by FlightParser#statement.
FlightListener.prototype.enterStatement = function(ctx) {
};

// Exit a parse tree produced by FlightParser#statement.
FlightListener.prototype.exitStatement = function(ctx) {
};


// Enter a parse tree produced by FlightParser#block.
FlightListener.prototype.enterBlock = function(ctx) {
  this.res.push('{' + this.lineEnding);
  this.currentIndent++;
};

// Exit a parse tree produced by FlightParser#block.
FlightListener.prototype.exitBlock = function(ctx) {
  this.res.push('}' + this.lineEnding);
  this.currentIndent--;
};

// Enter a parse tree produced by FlightParser#statements.
FlightListener.prototype.enterStatements = function(ctx) {
};

// Exit a parse tree produced by FlightParser#statements.
FlightListener.prototype.exitStatements = function(ctx) {
};


// Enter a parse tree produced by FlightParser#expressionStatement.
FlightListener.prototype.enterExpressionStatement = function(ctx) {
};

// Exit a parse tree produced by FlightParser#expressionStatement.
FlightListener.prototype.exitExpressionStatement = function(ctx) {
};


// Enter a parse tree produced by FlightParser#returnStatement.
FlightListener.prototype.enterReturnStatement = function(ctx) {
  this.res.push('return ');
};

// Exit a parse tree produced by FlightParser#returnStatement.
FlightListener.prototype.exitReturnStatement = function(ctx) {
  this.res.push(this.terminator);
};

// Enter a parse tree produced by FlightParser#variableStatement.
FlightListener.prototype.enterVariableStatement = function(ctx) {
};

// Exit a parse tree produced by FlightParser#variableStatement.
FlightListener.prototype.exitVariableStatement = function(ctx) {
};


// Enter a parse tree produced by FlightParser#variableDeclaration.
FlightListener.prototype.enterVariableDeclaration = function(ctx) {
};

// Exit a parse tree produced by FlightParser#variableDeclaration.
FlightListener.prototype.exitVariableDeclaration = function(ctx) {
};


// Enter a parse tree produced by FlightParser#varModifier.
FlightListener.prototype.enterVarModifier = function(ctx) {
};

// Exit a parse tree produced by FlightParser#varModifier.
FlightListener.prototype.exitVarModifier = function(ctx) {
};


// Enter a parse tree produced by FlightParser#varMutability.
FlightListener.prototype.enterVarMutability = function(ctx) {
};

// Exit a parse tree produced by FlightParser#varMutability.
FlightListener.prototype.exitVarMutability = function(ctx) {
};


// Enter a parse tree produced by FlightParser#ifStatement.
FlightListener.prototype.enterIfStatement = function(ctx) {
  this.res.push('if' + this.space);
};

// Exit a parse tree produced by FlightParser#ifStatement.
FlightListener.prototype.exitIfStatement = function(ctx) {

};


// Enter a parse tree produced by FlightParser#ifConditionList.
FlightListener.prototype.enterIfConditionList = function(ctx) {
  this.res.push('(');
};

// Exit a parse tree produced by FlightParser#ifConditionList.
FlightListener.prototype.exitIfConditionList = function(ctx) {
  this.res.push(')' + this.space);
};

// Enter a parse tree produced by FlightParser#elseStatement.
FlightListener.prototype.enterElseStatement = function(ctx) {
  this.res.push(' else ');
};

// Exit a parse tree produced by FlightParser#elseStatement.
FlightListener.prototype.exitElseStatement = function(ctx) {

};

// Enter a parse tree produced by FlightParser#functionDeclaration.
FlightListener.prototype.enterFunctionDeclaration = function(ctx) {
  this.res.push('function ' + ctx.Identifier());
};

// Exit a parse tree produced by FlightParser#functionDeclaration.
FlightListener.prototype.exitFunctionDeclaration = function(ctx) {
};

// Enter a parse tree produced by FlightParser#equal.
FlightListener.prototype.enterEqual = function(ctx) {
  this.res.push(this.space + '==' + this.space);
};

// Exit a parse tree produced by FlightParser#equal.
FlightListener.prototype.exitEqual = function(ctx) {
};

// Enter a parse tree produced by FlightParser#ArgumentsExpression.
FlightListener.prototype.enterArgumentsExpression = function(ctx) {
};

// Exit a parse tree produced by FlightParser#ArgumentsExpression.
FlightListener.prototype.exitArgumentsExpression = function(ctx) {
  if (!(
    ctx.parentCtx instanceof FlightParser.AdditiveExpressionContext || 
    !(ctx.parentCtx instanceof FlightParser.ExpressionStatementContext)
  ))
    this.res.push(this.terminator);
};


// Enter a parse tree produced by FlightParser#less.
FlightListener.prototype.enterLess = function(ctx) {
  this.res.push(this.space + '<' + this.space);
};

// Exit a parse tree produced by FlightParser#less.
FlightListener.prototype.exitLess = function(ctx) {

};


// Enter a parse tree produced by FlightParser#greater.
FlightListener.prototype.enterGreater = function(ctx) {
  this.res.push(this.space + '>' + this.space);
};

// Exit a parse tree produced by FlightParser#greater.
FlightListener.prototype.exitGreater = function(ctx) {
};


// Enter a parse tree produced by FlightParser#lessOrEql.
FlightListener.prototype.enterLessOrEql = function(ctx) {
  this.res.push(this.space+ '<=' + this.space);
};

// Exit a parse tree produced by FlightParser#lessOrEql.
FlightListener.prototype.exitLessOrEql = function(ctx) {
};


// Enter a parse tree produced by FlightParser#greaterOrEql.
FlightListener.prototype.enterGreaterOrEql = function(ctx) {
  this.res.push(this.space + '>=' + this.space);
};

// Exit a parse tree produced by FlightParser#greaterOrEql.
FlightListener.prototype.exitGreaterOrEql = function(ctx) {
};

// Enter a parse tree produced by FlightParser#add.
FlightListener.prototype.enterAdd = function(ctx) {
  this.res.push(this.space + '+' + this.space);
};

// Exit a parse tree produced by FlightParser#add.
FlightListener.prototype.exitAdd = function(ctx) {
};

// Enter a parse tree produced by FlightParser#sub.
FlightListener.prototype.enterSub = function(ctx) {
  this.res.push(this.space + '-' + this.space);
};

// Exit a parse tree produced by FlightParser#sub.
FlightListener.prototype.exitSub = function(ctx) {
};

// Enter a parse tree produced by FlightParser#RelationalExpression.
FlightListener.prototype.enterRelationalExpression = function(ctx) {
};

// Exit a parse tree produced by FlightParser#RelationalExpression.
FlightListener.prototype.exitRelationalExpression = function(ctx) {
};


// Enter a parse tree produced by FlightParser#LiteralExpression.
FlightListener.prototype.enterLiteralExpression = function(ctx) {
};

// Exit a parse tree produced by FlightParser#LiteralExpression.
FlightListener.prototype.exitLiteralExpression = function(ctx) {
};


// Enter a parse tree produced by FlightParser#EqualityExpression.
FlightListener.prototype.enterEqualityExpression = function(ctx) {
};

// Exit a parse tree produced by FlightParser#EqualityExpression.
FlightListener.prototype.exitEqualityExpression = function(ctx) {
};

// Enter a parse tree produced by FlightParser#parameterSeparator.
FlightListener.prototype.enterParameterSeparator = function(ctx) {
  this.res.push(',' + this.space);
};

// Exit a parse tree produced by FlightParser#parameterSeparator.
FlightListener.prototype.exitParameterSeparator = function(ctx) {

};

// Enter a parse tree produced by FlightParser#IdentifierExpression.
FlightListener.prototype.enterIdentifierExpression = function(ctx) {
  if (ctx.Identifier() == 'print') {
    this.res.push('console.log');
  } else {
    this.res.push(ctx.Identifier());
  }
};

// Exit a parse tree produced by FlightParser#IdentifierExpression.
FlightListener.prototype.exitIdentifierExpression = function(ctx) {
};


// Enter a parse tree produced by FlightParser#arguments.
FlightListener.prototype.enterArguments = function(ctx) {
  this.res.push('(');
};

// Exit a parse tree produced by FlightParser#arguments.
FlightListener.prototype.exitArguments = function(ctx) {
  this.res.push(')');
};


// Enter a parse tree produced by FlightParser#formalParameterList.
FlightListener.prototype.enterFormalParameterList = function(ctx) {
  this.res.push('(');
};

// Exit a parse tree produced by FlightParser#formalParameterList.
FlightListener.prototype.exitFormalParameterList = function(ctx) {
  this.res.push(')');
};


// Enter a parse tree produced by FlightParser#formalParameterArg.
FlightListener.prototype.enterFormalParameterArg = function(ctx) {
  this.res.push(ctx.Identifier());
};

// Exit a parse tree produced by FlightParser#formalParameterArg.
FlightListener.prototype.exitFormalParameterArg = function(ctx) {
};


// Enter a parse tree produced by FlightParser#functionBody.
FlightListener.prototype.enterFunctionBody = function(ctx) {
  this.res.push(this.space + '{' + this.lineEnding);
};

// Exit a parse tree produced by FlightParser#functionBody.
FlightListener.prototype.exitFunctionBody = function(ctx) {
  this.res.push(this.lineEnding + '}' + this.lineEnding + this.lineEnding);
};

// Enter a parse tree produced by FlightParser#literal.
FlightListener.prototype.enterLiteral = function(ctx) {
  this.res.push(ctx.getText());
};

// Exit a parse tree produced by FlightParser#literal.
FlightListener.prototype.exitLiteral = function(ctx) {
};

module.exports = FlightLangListener;
